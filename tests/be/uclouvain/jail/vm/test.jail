define (adot <A>) 
	(copy (A)
        :state {@shape      -> when @isAccepting=true then 'doublecircle'
                               else 'circle',
				@style      -> 'filled',
                @fillcolor  -> when @isError=true then 'red'
                               when @isInitial=true then 'green'
                               else 'white'}
		:edge  {@label      -> @letter}
	);
define (show <A>) (jdotty (adot (A)));
A = <§dot 
	digraph DFA {
		graph [rankdir="LR"];
		node [shape="circle"];
		0 [label="v0" isInitial=true isAccepting=false isError=false];
		1 [label="v1" isInitial=false isAccepting=true isError=false];
		2 [label="v2" isInitial=false isAccepting=true isError=false];
		0 -> 1 [letter="a"];
		0 -> 2 [letter="a"];
		1 -> 1 [letter="b"];
		2 -> 2 [letter="b"];
		2 -> 1 [letter="b"];
	}
§>;
/*
(copy (A) 
        :state {@shape      -> when @isAccepting=true then 'doublecircle'
                               else 'circle',
				@style      -> 'filled',
                @fillcolor  -> when @isError=true then 'red'
                               when @isInitial=true then 'green'
                               else 'white'}
		:edge  {@label      -> @letter}
     );
(show (minimize (A)));
*/
(print (A) :format 'dot');
/* (save (A) "mygraph.dot"); */
(jdotty (adaptations (A)) :format 'dot');