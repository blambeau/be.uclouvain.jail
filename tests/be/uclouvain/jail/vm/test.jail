define (adot <A>) 
	     (copy (A)
             :vertex {@shape -> when @kind='ACCEPTING' then 'doublecircle'
                                when @kind='AVOID' then 'doublecircle'
                                else 'circle',
                      @style -> 'filled',
                      @fillcolor -> when @isInitial=true and 
                                        (@kind='ERROR' or @kind='AVOID') then 'brown'
                                    when @isInitial=true then 'green'
                                    when @kind='ERROR' then 'red'
                                    when @kind='AVOID' then 'red'
                                    else 'white',
                      @label     -> @label}
		     :edge  {@label -> @letter});

define (show <A>) (jdotty (adot (A)));

A = <§dot 
	digraph DFA {
		graph [rankdir="LR"];
		node [shape="circle"];
		0 [label="v0" isInitial=true  kind='PASSAGE'];
		1 [label="v1" isInitial=false kind='ACCEPTING'];
		2 [label="v2" isInitial=false kind='ACCEPTING'];
		0 -> 1 [letter="a"];
		0 -> 2 [letter="a"];
		1 -> 1 [letter="b"];
		2 -> 2 [letter="b"];
		2 -> 1 [letter="b"];
	}
§>;

(print (A) :format 'dot');
(print (A) :format 'dot' :stateCount 2);
(randdfa (A) :stateCount 20 :alphabetSize 2);
(jdotty (adaptations (A)) :format 'dot');
\help
\help save
\help load save