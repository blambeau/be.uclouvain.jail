define (adot <A>) 
	     (copy (A)
             :vertex {@shape -> when @kind='ACCEPTING' then 'doublecircle'
                                when @kind='AVOID' then 'doublecircle'
                                else 'circle',
                      @style -> 'filled',
                      @fillcolor -> when @isInitial=true and 
                                        (@kind='ERROR' or @kind='AVOID') then 'brown'
                                    when @isInitial=true then 'green'
                                    when @kind='ERROR' then 'red'
                                    when @kind='AVOID' then 'red'
                                    else 'white',
                      @label     -> @label}
		     :edge  {@label -> @letter});

TRAIN = <§seqp 
	STOPPED=start->STARTED|alarm->open->OPENED,
	STARTED=stop->STOPPED|alarm->stop->eopen->OPENED,
	OPENED=close->STOPPED.
§>;
RUNNING = <§seqp
	NO=start->YES|stop->NO,
	YES=stop->NO|start->YES.
§>;
COMPOSE = (compose (RUNNING) (TRAIN)  
               :state {@label -> pickUp(@label)}
           );

(print (COMPOSE) :format 'dot');
(jdotty (adot (COMPOSE)));

/*
(jdotty (adot (TRAIN)) :format 'dot');
(jdotty (adot (RUNNING)) :format 'dot');
(jdotty (adot (compose (TRAIN) (RUNNING))));
*/