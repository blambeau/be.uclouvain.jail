/* Imports common definitions. */
(execute 'commons.jail');

define (allaccept <A>)
       (copy (A) :vertex {@kind -> when @kind='PASSAGE' then 'ACCEPTING'
		                           when @kind='ERROR' then 'AVOID'
		                           else @kind});

// train target, that we will try to learn
TRAIN = (allaccept <§seqp
   SC[@kind='ACCEPTING'] = start->RC|open->SO|alarm->SA,
	 RC[@kind='ACCEPTING'] = stop->SC|alarm->RA,
	 SO[@kind='ACCEPTING'] = close->SC,
	 SA[@kind='ACCEPTING'] = eopen->SO,
	 RA[@kind='ACCEPTING'] = estop->SA.
§>);
(show TRAIN);

TRAIN_SAMPLE = (allaccept <§jis
+ start stop start
+ start alarm estop eopen close start
+ open close start alarm estop eopen
+ start stop alarm eopen
- start eopen
- start alarm eopen
§>);
(show (TRAIN_SAMPLE));

// copy sample and execute RPNI with and without oracle
PTA = (copy TRAIN_SAMPLE);
R  = (rpni PTA);
R2 = (rpni PTA :oracle 'blambeau' :querier TRAIN);


// copy sample and execute RPNI with and without oracle
PTA = (copy TRAIN_SAMPLE);
B  = (bluefringe PTA :threshold 1);
B2 = (bluefringe PTA :threshold 1 :oracle 'blambeau' :querier TRAIN);

(show (uncomplement R));
(show (uncomplement R2));
(show (uncomplement B));
(show (uncomplement B2));
