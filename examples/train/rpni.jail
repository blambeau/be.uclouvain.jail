/* Imports common definitions. */
(execute 'commons.jail');

define (allaccept <A>)
       (copy (A) :vertex {@kind -> when @kind='PASSAGE' then 'ACCEPTING'
				                           when @kind='ERROR' then 'AVOID'
				                           else @kind}
		   );

TRAIN = (allaccept <§seqp
   SC[@kind='ACCEPTING'] = start->RC|open->SO|alarm->SA,
	 RC[@kind='ACCEPTING'] = stop->SC|alarm->RA,
	 SO[@kind='ACCEPTING'] = close->SC,
	 SA[@kind='ACCEPTING'] = eopen->SO,
	 RA[@kind='ACCEPTING'] = estop->SA.
§>);
(show TRAIN);

TRAIN_SAMPLE = (allaccept <§jis
+ start stop start
+ start alarm estop eopen close start
+ open close start alarm estop eopen
+ start stop alarm eopen
- start eopen
- start alarm eopen
§>);
(show (TRAIN_SAMPLE));

PTA = (determinize (TRAIN_SAMPLE));
(show (PTA));

R  = (rpni PTA);
R2 = (rpni PTA :oracle 'blambeau' :querier TRAIN);
B  = (bluefringe PTA :threshold 1);
B2 = (bluefringe PTA :threshold 1 :oracle 'blambeau' :querier TRAIN);

(show (R));
(show (R2));
(show (B));
(show (B2));
