(execute 'commons.jail');

// identifies all states by incrementation
define (identify <G>)
	     (copy G :vertex {@id    -> increment()});
define (allaccept <A>)
	     (copy (A) :vertex {@kind -> when @kind='PASSAGE' then 'ACCEPTING'
			                             when @kind='ERROR' then 'AVOID'
			                             else	@kind});


// generate a random DFA with aai tuning
A = <§seqp Q0. §>;
G = (randdfa A :stateCount stateCount :alphabetSize 2 :accepting 1.0 :tolerance 0.01);

// identify the generated DFA
G = (identify (complement G));

H = (randsample G :pathCount 10 :pathLength 7 :chooseRoot false 
		                            :extend false :posProba 1.0);

PTA = (allaccept (determinize H :state {@label -> allsame(@id)}));

R  = (rpni PTA);
R2 = (rpni PTA :oracle 'blambeau' :querier G);
B  = (bluefringe PTA);
B2 = (bluefringe PTA :oracle 'blambeau' :querier G);

(show G);
//(show H);
(show PTA);
(show R);
(show R2);
(show B);
(show B2);
