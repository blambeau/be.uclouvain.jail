(execute 'commons.jail');

/** BigTrain System (expected target) */
TRAIN = <§seqp 
	Q0[@ss='Q0'] = start->Q1|open->Q2|alarm->Q9|close->Q19,
	Q1[@ss='Q1'] = stop->Q0|leaving->Q3|alarm->Q10|open->Q19,
	Q2[@ss='Q2'] = close->Q0,
	Q3[@ss='Q3'] = stop->Q4|high->Q5|approaching->Q7|alarm->Q11,
	Q4[@ss='Q4'] = start->Q3|open->Q19,
	Q5[@ss='Q5'] = low->Q3|approaching->Q6|alarm->Q14|leaving->Q19,
	Q6[@ss='Q6'] = low->Q7|alarm->Q18,
	Q7[@ss='Q7'] = stop->Q8|atstation->Q1|alarm->Q15|high->Q19,
	Q8[@ss='Q8'] = start->Q7,
	Q9[@ss='Q9'] = open->Q2|high->Q19,
	Q10[@ss='Q10'] = stop->Q9,
	Q11[@ss='Q11'] = stop->Q12,
	Q12[@ss='Q12'] = open->Q13|approaching->Q19,
	Q13[@ss='Q13'] = close->Q4,
	Q14[@ss='Q14'] = low->Q11,
	Q15[@ss='Q15'] = stop->Q16,
	Q16[@ss='Q16'] = open->Q17,
	Q17[@ss='Q17'] = close->Q8,
	Q18[@ss='Q18'] = low->Q15,
	Q19[@ss='Q19' @kind='AVOID'] = tau->Q19.
§>;
TRAIN = (determinize (tmoves TRAIN :tau 'tau' :state {@ss -> @ss}) :state {@ss -> @ss});

/** Starting PTA. */
PTA = (allaccept <§jis
+ start leaving high approaching low atstation stop open close
+ start leaving high low stop start approaching stop start atstation leaving
+ alarm open
+ start alarm stop open
+ start leaving alarm stop open close
+ start leaving high alarm low stop open close
+ start leaving high approaching low alarm stop open close 
+ start leaving high approaching alarm low low stop open close 
- start open
- start leaving high low stop open
- start leaving stop start approaching high
§>);

TESTSAMPLE = (determinize (randsample TRAIN :posProba 0.5 :extend true :pathCount 120 :pathLength 8 :maxTry 2));

/** Decorated PTA with domain properties. */
DEC_PTA = (compose PTA DOORS SPEED MOVING SENSOR 
                   :state {@closed  -> @closed, 
                           @speed   -> @speed, 
                           @station -> @station,
                           @moving  -> @moving});

/** Decorated PTA with mandatory merges. */
MM_PTA = (identify (compose DEC_PTA TRAIN :state {@ss      -> @ss,       
                                                  @closed  -> @closed, 
                                                  @speed   -> @speed, 
                                                  @station -> @station, 
                                                  @moving  -> @moving}));

define (forasm <A>)
       (rpni A :state  {@source  -> allsame(@source),
                        @closed  -> @closed,
                        @speed   -> @speed,
                        @station -> @station,
                        @moving  -> @moving});

RPNI = (copy DEC_PTA);
BLUEFRINGE = (copy DEC_PTA);
ASM1 = (forasm (copy MM_PTA :vertex {@source -> when @ss='Q0' then @ss else @index}));
ASM2 = (forasm (copy MM_PTA :vertex {@source -> when @ss='Q0' or @ss='Q3' then @ss else @index}));
ASM3 = (forasm (copy MM_PTA :vertex {@source -> when @ss='Q0' or @ss='Q3' or @ss='Q7' then @ss else @index}));
ASM4 = (forasm (copy MM_PTA :vertex {@source -> @ss}));

RPNIED      = (uncomplement (rpni       RPNI       :state {@closed -> allsame(@closed)}));
BLUEFRINGED = (uncomplement (bluefringe BLUEFRINGE :state {@closed -> allsame(@closed)}));
ASMED1      = (uncomplement (asm        ASM1       :state {@closed -> allsame(@closed)}));
ASMED2      = (uncomplement (asm        ASM2       :state {@closed -> allsame(@closed)}));
ASMED3      = (uncomplement (asm        ASM3       :state {@closed -> allsame(@closed)}));
ASMED4      = (uncomplement (asm        ASM4       :state {@closed -> allsame(@closed)}));

(score RPNIED TESTSAMPLE);
(score BLUEFRINGED TESTSAMPLE);
(score ASMED1 TESTSAMPLE);
(score ASMED2 TESTSAMPLE);
(score ASMED3 TESTSAMPLE);
(score ASMED4 TESTSAMPLE);



/**
RPNIED      Score: 0.5319148936170213
BLUEFRINGED Score: 0.8085106382978723
ASMED1      Score: 0.5319148936170213
ASMED2      Score: 0.6382978723404256
ASMED3      Score: 0.5957446808510638
ASMED4      Score: 0.9148936170212766
*/
