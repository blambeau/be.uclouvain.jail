(execute 'commons.jail');

/** BigTrain System (expected target) */
TRAIN = <§seqp 
	Q0[@ss='Q0'] = start->Q1|open->Q2,
	Q1[@ss='Q1'] = stop->Q0|leaving->Q3,
	Q2[@ss='Q2'] = close->Q0,
	Q3[@ss='Q3'] = stop->Q4|high->Q5|approaching->Q7,
	Q4[@ss='Q4'] = start->Q3,
	Q5[@ss='Q5'] = low->Q3|approaching->Q6,
	Q6[@ss='Q6'] = low->Q7,
	Q7[@ss='Q7'] = stop->Q8|atstation->Q1,
	Q8[@ss='Q8'] = start->Q7.
§>;
TRAIN = (complement TRAIN);

/** Starting PTA. */
PTA = (allaccept <§jis
+ start leaving high approaching low atstation stop open close
+ start leaving high low stop start approaching stop start atstation leaving
- start open
- start leaving high low stop open
- start leaving high low stop start approaching high
§>);

/** Decorated PTA with domain properties. */
DEC_PTA = (compose PTA DOORS SPEED MOVING SENSOR 
                   :state {@closed  -> @closed, 
                           @speed   -> @speed, 
                           @station -> @station,
                           @moving  -> @moving});

/** Decorated PTA with mandatory merges. */
MM_PTA = (identify (compose DEC_PTA TRAIN :state {@ss -> @ss,       @closed -> @closed, 
                                                  @speed -> @speed, @station -> @station, 
                                                  @moving -> @moving}));

define (forasm <A>)
       (rpni A :state  {@source  -> allsame(@source),
                        @closed  -> @closed,
                        @speed   -> @speed,
                        @station -> @station,
                        @moving  -> @moving});
ASM1 = (forasm (copy MM_PTA :vertex {@source -> when @ss='Q0' then @ss else @index}));
ASM2 = (forasm (copy MM_PTA :vertex {@source -> when @ss='Q0' or @ss='Q3' then @ss else @index}));
ASM3 = (forasm (copy MM_PTA :vertex {@source -> when @ss='Q0' or @ss='Q3' or @ss='Q7' then @ss else @index}));
ASM4 = (forasm (copy MM_PTA :vertex {@source -> @ss}));

RPNIED      = (uncomplement (rpni (copy DEC_PTA) 
                                  :state {@closed -> allsame(@closed), @moving -> allsame(@moving)}
                             )
              );
BLUEFRINGED = (uncomplement (bluefringe (copy DEC_PTA)
                                  :state {@closed -> allsame(@closed), @moving -> allsame(@moving)}
                            )
              );

ASMED1 = (uncomplement (asm  ASM1    :state {@closed -> allsame(@closed), @moving -> allsame(@moving)}));
ASMED2 = (uncomplement (asm  ASM2    :state {@closed -> allsame(@closed), @moving -> allsame(@moving)}));
ASMED3 = (uncomplement (asm  ASM3    :state {@closed -> allsame(@closed), @moving -> allsame(@moving)}));
ASMED4 = (uncomplement (asm  ASM4    :state {@closed -> allsame(@closed), @moving -> allsame(@moving)}));

