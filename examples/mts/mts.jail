(execute 'commons.jail');

define (extendsc <A>)
	     (complement A :heuristic 'sink');
define (extendprop <A>)
	     (copy A :vertex {@kind -> when @kind='PASSAGE' then 'ACCEPTING'
				                        when @kind='ACCEPTING' then 'AVOID'});

// (authenticate sendMsg* logout logoutMsg | authenticate sendMsg* disable logoutMsg enable)*
SC = <§seqp
Q0  = tau->Q1|tau->Q2,
Q1  = authenticate->Q11,
Q11 = sendMsg->Q11|logout->logoutMsg->Q12,
Q12 = tau->Q0,
Q2  = authenticate->Q21,
Q21 = sendMsg->Q21|disable->logoutMsg->enable->Q22,
Q22 = tau->Q0.
§>;
SC = (minimize (determinize (tmoves SC :tau 'tau')));
(show SC);
(show (extendsc SC));

// logout -> XlogoutMsg
PROP = <§seqp
Q0[@kind='PASSAGE'] = authenticate->Q0|sendMsg->Q0|logoutMsg->Q0|enable->Q0|disable->Q0|logout->Q1,
Q1[@kind='PASSAGE'] = logoutMsg->Q0|authenticate->Q2|sendMsg->Q2|enable->Q2|disable->Q2|logout->Q2,
Q2[@kind='ACCEPTING'] = authenticate->Q2|sendMsg->Q2|logoutMsg->Q2|enable->Q2|disable->Q2|logout->Q2.
§>;
(show PROP);
(show (extendprop PROP));

(show (compose (extendsc SC) (extendprop PROP)));
