/*
	with isT12 equiv !isT34,
	     isN1 equiv !isN0,
	     isM1 equiv !isM0,
	BDD1 = (isM0 and isN0 and isT12),
	BDD2 = (isM0 and (isN1 or (isN0 and isT34)))
	BDD3 = isM1;
*/

/** Automaton dot command. */
/** Automaton dot command. */
define (adot <A>) 
	     (copy (A)
             :vertex {@shape -> when @kind='ACCEPTING' then 'doublecircle'
                                when @kind='AVOID' then 'doublecircle'
                                else 'circle',
                      @style -> 'filled',
                      @fillcolor -> when @isInitial=true and 
                                        (@kind='ERROR' or @kind='AVOID') then 'brown'
                                    when @isInitial=true then 'green'
                                    when @kind='ERROR' then 'red'
                                    when @kind='AVOID' then 'red'
                                    else 'white',
                      @label     -> @label}
		     :edge  {@label -> @letter});

/** JDotty for automaton dot. */
define (show <A>)
	     (jdotty (adot (cast (A) 'be.uclouvain.jail.fa.IDFA')));



BDD1 = <§bdd (isM0 and isN0 and isT12) §>;
BDD2 = <§bdd (isM0 and (not isN0 or (isN0 and not isT12))) §>;
BDD3 = <§bdd not isM0 §>;

C = (show (BDD1));
D = (show (BDD2));
E = (show (BDD3));

G = (compose (C) (D) (E) :state {@variable -> list(@variable)});
(show (G));

F = (copy (C) (D) (E));
(show (F));
H = (determinize (F) :state {@variable -> list(@variable)});
(show (H));
